#自动补全
yum install bash-completion -y
echo "source <(kubectl completion bash)" >> ~/.bashrc

#查看所有api resource
kubectl api-resources --namespaced=true
kubectl api-resources --namespaced=false

#查看所有api service和版本
kubectl get apiservices
kubectl api-versions

#context
kubectl config view
kubectl config get-clusters
kubectl config get-contexts
kubectl config set-cluster product --server=https://192.168.44.132:6443 --certificate-authority=/etc/kubernetes/pki/ca.crt
kubectl config set-credentials ppp --client-certificate=/etc/kubernetes/pki/admin.pem --client-key=/etc/kubernetes/pki/admin-key.pem
kubectl config set-context system --cluster=product --user=ppp
kubectl config use-context system

#常用
kubectl run alpine --image=alpine --replicas=4 --command -- sleep 36000
kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort
kubectl run nginx --image=nginx:1.13 --replicas=1 --requests='cpu=0.1,memory=128Mi' --limits='cpu=0.2,memory=256Mi' --restart=Always --image-pull-policy=IfNotPresent

##open api server or expose service
kubectl proxy --accept-paths='^.*' --address='0.0.0.0' --port=8080 --accept-hosts='^*$'
#access service from outside
http://192.168.44.136:8080/api/v1/namespaces/mytest/services/nginx/proxy/
#access kubelet api
http://192.168.44.136:8080/api/v1/nodes/ubuntu/proxy/
/stats/summary  /stats/*
/metrics/*
/logs/*
/spec/*


#access api use kubectl
kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes/pp"|jq .

##查看k8s集群状态
kubectl get componentstatuses
kubectl cluster-info
#查看当前leader
kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml

#K8S的DNS路径
svc_name.namespace_name.svc + cluster.local

#HPA
kubectl autoscale deploy/nginx --min=1 --max=5 --cpu-percent=30

#创建tls密钥
kubectl create secret tls frontend-secret --key ./devops.key --cert ./devops.crt

#创建registry密钥
kubectl create secret docker-registry myregistrykey --docker-server=10.18.100.79:8800 --docker-username=admin --docker-password=2wsx#EDC --docker-email=devops@dxc.com

#label
#update label
kubectl label pod nginx-95fb6b497-58r5p  tier=backend --overwrite
#add label
kubectl label pod nginx-95fb6b497-58r5p  tier=backend
#delete label
kubectl label pod nginx-95fb6b497-58r5p  tier-

##filter
--all-namespace
-l run=myapp
--field-selector "status.phase!=Running,spec.restartPolicy=Always"
-o wide
-w
#field-selector
kubectl get pods --field-selector status.phase=Running
kubectl get services --field-selector metadata.namespace!=default
kubectl get pods --field-selector=status.phase!=Running,spec.restartPolicy=Always
kubectl get pods --field-selector metadata.name=redis-master

##format
#use go-template
kubectl get pods --all-namespaces -o go-template --template='{{range .items}}{{printf "|%-20s|%-50s|%-30s|\n" .metadata.namespace .metadata.name .metadata.uid}}{{end}}'
kubectl get pods --all-namespaces -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}"
#use jq
kubectl get pods -o json|jq -r '.items[].spec.containers[] | .name +" "+.image'
kubectl get pods -o json|jq '.items[].metadata | .name +" "+ .ownerReferences[].name + " "+.ownerReferences[].kind' #获取pod的父亲名字和类型
#user jsonpath
kubectl get pods --all-namespaces -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}'

#滚动升级:
kubectl set image deploy/alpine alpine:latest
kubectl rollout history deployments/alpine
kubectl rollout undo deployments/alpine

#标记某个storageclass为default
kubectl patch storageclass <your-class-name> -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'

#Advertise a new extended resource on one of your Nodes
#add
curl --header "Content-Type: application/json-patch+json" --request PATCH --data '[{"op": "add", "path": "/status/capacity/dongle", "value": "4"}]' http://localhost:8080/api/v1/nodes/pp/status
#remove
curl --header "Content-Type: application/json-patch+json" --request PATCH --data '[{"op": "remove", "path": "/status/capacity/dongle"' http://localhost:8080/api/v1/nodes/pp/status


##强制删除
# 强制删除POD
kubectl delete pod PODNAME --force --grace-period=0

# 强制删除NAMESPACE
kubectl delete namespace NAMESPACENAME --force --grace-period=0

#Fedreation
#init
kubefed init fellowship --host-cluster-context=system --dns-provider="coredns" --dns-zone-name="example.com." --dns-provider-config="/root/coredns-provider.conf" --api-server-service-type="NodePort" --image='markdotsonrs/fcp-amd64:v1.9.0-alpha.3' --federation-system-namespace='federation'

#查看从某个时间点开始的日志信息
kubectl -n devops logs devportal-7b54df68bc-cpzkh --since-time="2018-12-01T04:58:20+08:00"
#查看最近多久的日志
kubectl -n devops logs devportal-7b54df68bc-cpzkh --since=10s

